# -*- coding: utf-8 -*-
"""dps.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PXbObKYSPUH36vEe2ggniztZDGlYHMO7
"""

import pandas as pd
from collections import Counter

# Sample dataset
raw_data = pd.DataFrame({
    'Age': [25, 26, 27, 27, 28, 29, 30, 30, 31, 31],
    'Zipcode': ['12345', '12346', '12345', '12345', '12346', '12346', '12347', '12347', '12348', '12348'],
    'Disease': ['Flu', 'Cold', 'Cancer', 'Flu', 'Cold', 'Diabetes', 'Flu', 'Cold', 'Cancer', 'Diabetes']
})

print("Original Dataset:")
print(raw_data)

def generalize_age(age):
    return f"{(age // 5) * 5}-{((age // 5) * 5) + 4}"

def generalize_zip(zipcode):
    return zipcode[2:] + "XX"  # Mask last two digits

raw_data['Generalized_Age'] = raw_data['Age'].apply(generalize_age)
raw_data['Generalized_Zipcode'] = raw_data['Zipcode'].apply(generalize_zip)

anonymized_data = raw_data.drop(columns=['Age', 'Zipcode'])
print("\nAfter Applying k-Anonymity:")
print(anonymized_data)

def check_l_diversity(df, quasi_identifiers, sensitive_attribute, l):
    grouped = df.groupby(quasi_identifiers)
    for name, group in grouped:
        value_counts = Counter(group[sensitive_attribute])
        if len(value_counts) < l:
            return False
    return True

quasi_identifiers = ['Generalized_Age', 'Generalized_Zipcode']
sensitive_attribute = 'Disease'
l_value = 2  # Ensuring at least 2 different diseases per group

is_l_diverse = check_l_diversity(anonymized_data, quasi_identifiers, sensitive_attribute, l_value)
print("\nDoes the dataset satisfy l-Diversity (l=2)?", is_l_diverse)

import pandas as pd
from collections import Counter

# Sample dataset
raw_data = pd.DataFrame({
    'Age': [25, 26, 27, 27, 28, 29, 30, 30, 31, 31],
    'Zipcode': ['12345', '12346', '12345', '12345', '12346', '12346', '12347', '12347', '12348', '12348'],
    'Disease': ['Flu', 'Cold', 'Cancer', 'Flu', 'Cold', 'Diabetes', 'Flu', 'Cold', 'Cancer', 'Diabetes']
})

print("Original Dataset:")
print(raw_data)

# Step 1: Apply k-Anonymity (Generalizing Age and Zipcode)
def generalize_age(age):
    return f"{(age // 5) * 5}-{((age // 5) * 5) + 4}"

def generalize_zip(zipcode):
    return zipcode[:3] + "XX"  # Mask last two digits for better generalization

raw_data['Generalized_Age'] = raw_data['Age'].apply(generalize_age)
raw_data['Generalized_Zipcode'] = raw_data['Zipcode'].apply(generalize_zip)

# Drop original quasi-identifiers
anonymized_data = raw_data.drop(columns=['Age', 'Zipcode'])

print("\nAfter Applying k-Anonymity:")
print(anonymized_data)

# Step 2: Check k-Anonymity
def check_k_anonymity(df, quasi_identifiers, k):
    """Returns True if every equivalence class has at least k records."""
    grouped = df.groupby(quasi_identifiers).size()
    return (grouped >= k).all()

k_value = 2  # Ensuring each group appears at least k times
is_k_anonymous = check_k_anonymity(anonymized_data, ['Generalized_Age', 'Generalized_Zipcode'], k_value)
print(f"\nDoes the dataset satisfy k-Anonymity (k={k_value})?", is_k_anonymous)

# Step 3: Check l-Diversity
def check_l_diversity(df, quasi_identifiers, sensitive_attribute, l):
    """Returns True if every equivalence class has at least l distinct sensitive values."""
    grouped = df.groupby(quasi_identifiers)
    for _, group in grouped:
        if len(set(group[sensitive_attribute])) < l:
            return False
    return True

l_value = 2  # Ensuring at least 2 different diseases per group
is_l_diverse = check_l_diversity(anonymized_data, ['Generalized_Age', 'Generalized_Zipcode'], 'Disease', l_value)
print(f"\nDoes the dataset satisfy l-Diversity (l={l_value})?", is_l_diverse)